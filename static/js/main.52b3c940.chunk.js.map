{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","formError","formAddress","formProposal","ownerOfVotes","workflowStatusNum","whitelist","proposals","winningProposalID","btnWhitelistIsInactive","btnVoteIsInactive","componentDidMount","eth","getAccounts","i","length","utils","toChecksumAddress","setState","methods","getVoter","call","hasVoted","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","on","runInit","alert","error","getAddresses","getProposals","getWinningProposalID","parseInt","getStatusOfWorkflow","getOwnerOfVotes","events","VoterRegistered","event","eventVoterRegistered","WorkflowStatusChange","eventWorkflowStatusChange","ProposalRegistered","eventProposalRegistered","Voted","eventProposalVoted","updatedWhitelist","returnValues","RegisterVoter","preventDefault","registerVoter","send","from","message","updatedworkflowStatusNum","workflowStatus","startProposalsRegistrationSession","startProposalRegistrationSession","updatedProposals","registerANewProposal","yourProposal","registerProposal","endProposalsRegistrationSession","endProposalRegistrationSession","startVotingSession","voteCount","registerVotes","vote","formVote","doTheVote","endSessionVotes","endVotingSession","beginTallySession","tallyVotesSession","this","header","className","forbiddenOperationsArea","style","display","justifyContent","cSAccounts0","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","index","key","Form","Group","Control","placeholder","isInvalid","Boolean","onChange","e","target","value","type","id","Button","minWidth","onClick","description","disabled","defaultValue","as","hidden","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52b3c940.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Web3 from \"web3\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n\n    //initialisations\n    state = { web3: null, accounts: null, contract: null,\n        formError: null,formAddress: null, formProposal: null, ownerOfVotes: null,\n        workflowStatusNum: 0, whitelist: [], proposals: [], winningProposalID: null,\n        btnWhitelistIsInactive: true, btnVoteIsInactive: true};\n\n    /**\n     * name: componentDidMount\n     * description: initialisation of the application (get the smart contract etc.)\n     * @returns {Promise<void>}\n     */\n    componentDidMount = async () => {\n\n        try {\n\n            //get the web3 provider\n            const web3 = await getWeb3();\n\n            //using of web3 to get the accounts of the user (in metamask)\n            const accounts = await web3.eth.getAccounts();\n\n            for(let i = 0; i < this.state.whitelist.length; i++) {\n                if(Web3.utils.toChecksumAddress(this.state.whitelist[i]) === Web3.utils.toChecksumAddress(accounts[0])) {\n                    this.setState({btnWhitelistIsInactive: false});\n                    const voter = await this.state.contract.methods.getVoter(accounts[0]).call();\n                    if(voter.hasVoted == true){\n                        console.log(\"This voter has Voted\");\n                        this.setState({btnVoteIsInactive: true});\n                    } else {\n                        this.setState({btnVoteIsInactive: false});\n                    }\n                    break;\n                }\n                else{\n                    this.setState({btnWhitelistIsInactive: true});\n                    this.setState({btnVoteIsInactive: true});\n                }\n            }\n\n            //get the instance of the smart contract \"Voting\" with web3 and the informations of deployed file (client/src/contracts/Voting.json)\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = Voting.networks[networkId];\n\n            const instance = new web3.eth.Contract(\n                Voting.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n\n            // To avoid the problem of switch accounts in order to refresh the screen\n            // related to the account where I am\n            window.ethereum.on('accountsChanged', async (accounts) => {\n                for(let i = 0; i < this.state.whitelist.length; i++) {\n                    console.log('this.state.whitelist[i]: ', this.state.whitelist[i]);\n                    console.log('accounts[0]: ', accounts[0]);\n                    if(Web3.utils.toChecksumAddress(this.state.whitelist[i]) === Web3.utils.toChecksumAddress(accounts[0])) {\n                        console.log('change state, I am go though the if');\n                        this.setState({btnWhitelistIsInactive: false});\n\n                        const voter = await this.state.contract.methods.getVoter(accounts[0]).call();\n                        if(voter.hasVoted == true){\n                            console.log(\"hasVoted\");\n                            this.setState({btnVoteIsInactive: true});\n                        } else {\n                            this.setState({btnVoteIsInactive: false});\n                        }\n                        break;\n                    }\n                    else{\n                        this.setState({btnWhitelistIsInactive: true});\n                        this.setState({btnVoteIsInactive: true});\n                    }\n                }\n                this.setState({accounts});\n\n            });\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({web3, accounts, contract: instance}, this.runInit);\n        } catch (error) {\n            // Catch any errors for any of the above operations\n            alert(\n                `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n            );\n            console.error(error);\n        }\n    };\n\n    /**\n     * name: runInit\n     * description: used to start the application, to set the events, do the call etc.\n     * @returns {Promise<void>}\n     */\n    runInit = async() => {\n        const {contract} = this.state;\n\n        //Get the authorised account list\n        const whitelist = await contract.methods.getAddresses().call();\n        console.log({whitelist})\n        //Get the different proposals written at the first launch of the website and at\n        //the refresh of the page\n        const proposals = await contract.methods.getProposals().call();\n\n        //Get the winning proposal ID\n        const winningProposalID = await contract.methods.getWinningProposalID().call();\n\n        //Get the workflow status\n        const workflowStatusNum = parseInt(await contract.methods.getStatusOfWorkflow().call());\n        console.log('workflowStatusNum: ', workflowStatusNum);\n        let ownerOfVotes = Web3.utils.toChecksumAddress(await contract.methods.getOwnerOfVotes().call());\n        console.log('Checksum of ownerOfVotes: ', ownerOfVotes);\n\n        //update the state\n        this.setState({whitelist, ownerOfVotes, workflowStatusNum, proposals, winningProposalID} );\n\n        //List of the different events defined in the smart contract Voting & application for the DAPP\n        //the voter is registered\n        contract.events.VoterRegistered().on('data', (event) => this.eventVoterRegistered(event)).on('error', console.error);\n\n        //the workflow status is changed\n        contract.events.WorkflowStatusChange().on('data', (event) => this.eventWorkflowStatusChange(event)).on('error', console.error);\n\n        //the proposal is registered\n        contract.events.ProposalRegistered().on('data', (event) => this.eventProposalRegistered(event)).on('error', console.error);\n\n        //the vote is registered\n        contract.events.Voted().on('data', (event) => this.eventProposalVoted(event)).on('error', console.error);\n\n    }\n\n    /**\n     * name: eventVoterRegistered\n     * description: manages the information of the list of the registered users in the smart contract\n     * @param event\n     * @returns {Promise<void>}\n     */\n    eventVoterRegistered = async (event) => {\n        const { contract, accounts } = this.state;\n\n        const updatedWhitelist = await contract.methods.getAddresses().call();\n\n        console.log('value of event.returnValues[0]: ', event.returnValues[0]);\n        if(Web3.utils.toChecksumAddress(event.returnValues[0]) === Web3.utils.toChecksumAddress(accounts[0])) {\n            this.setState({btnWhitelistIsInactive: false});\n        }\n\n        this.setState({ whitelist: updatedWhitelist });\n    }\n\n    /**\n     * name: RegisterVoter\n     * description: registers the voters\n     * @param event\n     * @returns {Promise<void>}\n     */\n    RegisterVoter = async(event) => {\n\n        event.preventDefault();\n        const { accounts, contract } = this.state;\n        const address = this.state.formAddress;\n\n        try {\n            this.setState({ formError: null });\n            //We use the registerVoter method defined in the smart contract\n            await contract.methods.registerVoter(address).send({from: accounts[0]});\n        } catch (error){\n            console.error(error.message);\n            this.setState({formError: error.message});\n        }\n    }\n\n    /**\n     * name: eventWorkflowStatusChange\n     * description: allows to move in the different states of the workflow defined in Voting.sol\n     * @param event\n     * @returns {Promise<void>}\n     */\n    eventWorkflowStatusChange = async (event) => {\n        const { contract } = this.state;\n\n        const updatedworkflowStatusNum = parseInt(await contract.methods.getStatusOfWorkflow().call());\n        this.setState({ workflowStatusNum: updatedworkflowStatusNum });\n\n    }\n\n    /**\n     * name: getStatusOfWorkflow\n     * description: get the number of status of the workflow where I am\n     * @param event\n     * @returns {Promise<void>}\n     */\n    getStatusOfWorkflow = async (event) => {\n\n        const { contract } = this.state;\n\n        const workflowStatus = await contract.methods.getStatusOfWorkflow().call();\n        console.log('The current status of the workflow is: ', workflowStatus);\n    }\n\n    /**\n     * name: checkEventProposalsRegistrationStarted\n     * description: starts the step, in the workflow, to register the proposals for the voters\n     * @param event\n     * @returns {Promise<void>}\n     */\n    startProposalsRegistrationSession = async() => {\n\n        const { accounts, contract } = this.state;\n        await contract.methods.startProposalRegistrationSession().send({from: accounts[0]});\n    }\n\n    /**\n     * name: eventProposalRegistered\n     * description: manages the information of the list of the registered proposals in the smart contract\n     * @param event\n     * @returns {Promise<void>}\n     */\n    eventProposalRegistered = async(event) => {\n\n        const {contract, accounts} = this.state;\n\n        // retrieve the list of the registered proposals\n        const updatedProposals = await contract.methods.getProposals().call();\n\n        this.setState({proposals: updatedProposals});\n    }\n\n    /**\n     * name: registerANewProposal\n     * description: allows to register a new proposal\n     * @returns {Promise<void>}\n     */\n    registerANewProposal = async(event) => {\n\n        const { accounts, contract  } = this.state;\n        const yourProposal = this.state.formProposal;\n\n        try{\n            this.setState({formError:null});\n            //We use the registerProposal method defined in the smart contract\n            await contract.methods.registerProposal(yourProposal).send({from:accounts[0]});\n        }catch (error){\n            console.error(error.message);\n            this.setState({formError:error.message});\n        }\n    }\n\n    /**\n     * name: endProposalsRegistrationSession\n     * description: run the function of the smart contract which allows to close the\n     * registration of the proposals\n     * @param event\n     * @returns {Promise<void>}\n     */\n    endProposalsRegistrationSession = async() => {\n\n        const { accounts, contract } = this.state;\n        await contract.methods.endProposalRegistrationSession().send({from: accounts[0]});\n    }\n\n    /**\n     * name: startVotingSession\n     * description: allows to start the session of proposals voting\n     * @returns {Promise<void>}\n     */\n    startVotingSession = async() => {\n\n        const { accounts, contract } = this.state;\n        await contract.methods.startVotingSession().send({from:accounts[0]});\n    }\n\n    /**\n     * name: eventProposalVoted\n     * description: allows to update the proposals voted in the list\n     * @param event\n     * @returns {Promise<void>}\n     */\n    eventProposalVoted = async(event) => {\n\n        const { proposals, contract , accounts  } = this.state;\n\n        let updatedProposals = proposals;\n        updatedProposals[event.returnValues[1]].voteCount = parseInt(updatedProposals[event.returnValues[1]].voteCount);\n        console.log('value of event.returnValues[0]: ', event.returnValues[0]);\n\n        if(Web3.utils.toChecksumAddress(event.returnValues[0]) === Web3.utils.toChecksumAddress(accounts[0])) {\n\n            this.setState({btnVoteIsInactive: false});\n        }\n\n        updatedProposals = await contract.methods.getProposals().call();\n        console.log('This updatedProposals was voted :', updatedProposals);\n\n        const voter = await this.state.contract.methods.getVoter(accounts[0]).call();\n        if(voter.hasVoted == true){\n            console.log(\"hasVoted\");\n            this.setState({btnVoteIsInactive: true});\n        } else {\n            this.setState({btnVoteIsInactive: false});\n        }\n\n        this.setState({proposals: updatedProposals});\n    }\n\n    /**\n     * name: registerVotes\n     * description: allows to register a vote for the proposal chosen by the voter\n     * @returns {Promise<void>}\n     */\n    registerVotes = async() => {\n\n        const { accounts, contract} = this.state;\n\n        const vote = parseInt(this.state.formVote);\n\n        try {\n            this.setState({formError: null});\n            await contract.methods.doTheVote(vote).send({from: accounts[0]});\n        } catch (error) {\n            console.error(error.message);\n            this.setState({ formError: error.message });\n        }\n    }\n\n    /**\n     * name: endSessionVotes\n     * description: allows the admin to close the session of votes\n     * @returns {Promise<void>}\n     */\n    endSessionVotes = async () => {\n\n        const { accounts, contract } = this.state;\n        await contract.methods.endVotingSession().send({from:accounts[0]});\n    }\n\n    /**\n     * name: beginTallySession\n     * description: allows the administrator to begin the session to tally the votes\n     * @returns {Promise<void>}\n     */\n    beginTallySession = async () => {\n\n        const { accounts, contract } = this.state;\n        const winningProposalID = await contract.methods.getWinningProposalID().call();\n\n        console.log('state of winningProposalID: ', winningProposalID);\n        this.setState({winningProposalID});\n        await contract.methods.tallyVotesSession().send({from: accounts[0]});\n    }\n\n    /**\n     * name: getWinningProposalID\n     * description: allows to get the ID of winning proposal - second way to do\n     * @returns {Promise<void>}\n     */\n    getWinningProposalID = async() => {\n\n        const { contract } = this.state;\n        const winningProposalID = await contract.methods.getWinningProposalID().call();\n\n        console.log('state of winningProposalID: ', winningProposalID);\n        this.setState({winningProposalID});\n        \n    }\n\n    //************************ render ************************\n    render(){\n        const { accounts, whitelist, proposals, formError, ownerOfVotes, winningProposalID } = this.state;\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n\n        //************************ header ************************\n        let header =\n            <div className=\"App\">\n                <div>\n                    <h2 className=\"text-center\">Welcome to the voting system DAPP!</h2>\n\n                    <hr></hr>\n                    <br></br>\n                </div>\n\n                <br></br>\n                <br></br>\n            </div>;\n\n        //************************ definition of forbidden operations area ************************\n        let forbiddenOperationsArea =\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                <h1>Operation forbidden because you are not the admin of the voting system!</h1>\n            </div>\n\n        let cSAccounts0 = Web3.utils.toChecksumAddress(accounts[0]);\n\n\n        //************************ logic of the display  ************************\n        switch(this.state.workflowStatusNum) {\n\n            //We register the voters\n            case 0:\n                if (cSAccounts0 === ownerOfVotes) {\n\n                    return (\n\n                        <div>\n                            {header}\n\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>List of authorised accounts</strong></Card.Header>\n                                    <Card.Body>\n                                        <ListGroup variant=\"flush\">\n                                            <ListGroup.Item >\n                                                <Table striped bordered hover>\n                                                    <thead>\n                                                    <tr>\n                                                        <th>@</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {whitelist.map((a,index) => <tr key={index}>\n                                                            <td>{a}</td>\n                                                        </tr>)\n                                                        }\n                                                    </tbody>\n                                                </Table>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>Authorise a new account</strong></Card.Header>\n                                    <Card.Body>\n                                        <Form.Group  >\n\n                                            <Form.Control placeholder=\"Enter Address please \" isInvalid={Boolean(formError)} onChange={e => this.setState({ formAddress: e.target.value, formError: null })} type=\"text\" id=\"address\"\n                                            />\n\n                                        </Form.Group>\n\n                                        <br/>\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n\n                                            <Button style={{minWidth:'350px'}} onClick={this.RegisterVoter} variant=\"dark\"> Authorise </Button>\n\n                                        </div>\n\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>Your role: admin </strong></Card.Header>\n\n                                    <Card.Body>\n                                        <div style={{display: 'flex', justifyContent: 'center' }}>\n                                            <Button style={{minWidth:'350px'}} onClick={this.startProposalsRegistrationSession} variant=\"danger\"> Start the session of\n                                                registration of proposals </Button>\n                                        </div>\n\n                                        <br/>\n\n                                        <div style={{display: 'flex', justifyContent: 'center'}} >\n                                            <Button style={{minWidth:'350px'}} onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                                        </div>\n\n                                    </Card.Body>\n\n                                </Card>\n\n                            </div>\n\n                        </div>\n\n                    )\n\n                } else {\n                    return (\n                        <div>\n                            {header}\n                            {forbiddenOperationsArea}\n                        </div>\n                    )\n                }\n                break;\n\n            //We start to register the proposals\n            case 1:\n\n                    return (\n                        <div>\n                            {header}\n\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>List of the proposals:</strong></Card.Header>\n                                    <Card.Body>\n                                        <ListGroup variant=\"flush\">\n                                            <ListGroup.Item >\n                                                <Table striped bordered hover>\n                                                    <thead>\n                                                    <tr>\n                                                        <th>ID</th>\n                                                        <th>Description</th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n                                                        {proposals !== null && proposals.map((a, index) =>\n                                                            <tr key={index}>\n                                                                <td>{index}</td>\n                                                                <td>{a.description}</td>\n                                                            </tr>)\n                                                        }\n                                                    </tbody>\n                                                </Table>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>Write your proposal:</strong></Card.Header>\n                                    <Card.Body>\n                                        <Form.Group  >\n\n                                            <Form.Control placeholder=\"Your proposal please \" isInvalid={Boolean(formError)} onChange={e => this.setState({ formProposal: e.target.value, formError: null })} type=\"text\" id=\"proposal\"\n                                            />\n\n                                        </Form.Group>\n\n                                        <br/>\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n\n                                            <Button disabled={this.state.btnWhitelistIsInactive} style={{minWidth:'350px'}} onClick={this.registerANewProposal} variant=\"dark\"> Submit this one! </Button>\n\n                                        </div>\n\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>Your role: admin </strong></Card.Header>\n\n                                    <Card.Body>\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <Button style={{minWidth:'350px'}} onClick={this.endProposalsRegistrationSession} variant=\"danger\"> End the session of\n                                                registration of proposals </Button>\n                                        </div>\n\n                                        <br/>\n\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <Button style={{minWidth:'350px'}} onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                                        </div>\n\n                                    </Card.Body>\n\n                                </Card>\n\n                            </div>\n                        </div>\n                    )\n                break;\n\n            //The admin could start the session of proposal voting\n            case 2:\n\n                if (cSAccounts0 === ownerOfVotes) {\n\n                    return (\n                        <div>\n                            {header}\n\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Button style={{minWidth:'350px'}} onClick={this.startVotingSession} variant=\"secondary\"> Begin the votes of the proposals! </Button>\n                            </div>\n                            <br/>\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Button style={{minWidth:'350px'}} onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                            </div>\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div>\n                            {header}\n                            {forbiddenOperationsArea}\n                        </div>\n                    )\n                }\n                break;\n\n            //We vote the different proposals written by the voters\n            case 3:\n\n                    return (\n                        <div>\n                            {header}\n\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\"><strong>List of registered proposals</strong></Card.Header>\n                                    <Card.Body>\n                                        <ListGroup variant=\"flush\">\n                                            <ListGroup.Item>\n                                                <Table striped bordered hover>\n                                                    <thead>\n                                                    <tr>\n                                                        <th>ID</th>\n                                                        <th>proposal(s)</th>\n                                                        <th>Number of votes for this one: </th>\n                                                    </tr>\n                                                    </thead>\n                                                    <tbody>\n\n                                                       {proposals !== null && proposals.map((a, index) =>\n                                                           <tr key={index}>\n                                                               <td>{index}</td>\n                                                               <td>{a.description}</td>\n                                                               <td>{a.voteCount}</td>\n                                                           </tr>)\n                                                       }\n\n                                                    </tbody>\n                                                </Table>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem',justifyContent: 'center'}}>\n                                    <Card.Header className=\"text-center\"><strong>Vote for your favorite proposal, please</strong></Card.Header>\n                                    <Card.Body >\n\n                                        <Form.Group>\n                                            <Form.Control defaultValue={'Default'} as=\"select\" onChange={e => this.setState({ formVote: e.target.value })}>\n                                                <option value=\"Default\" disabled hidden ></option>\n                                                    { proposals !== null && proposals.map((a, index) =>\n                                                        <option key={index} value={index}>\n                                                            {a.description}\n                                                        </option>)\n                                                    }\n                                            </Form.Control>\n\n                                            <br/>\n                                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                                <Button  disabled={this.state.btnVoteIsInactive}  style={{minWidth:'350px'}} variant=\"primary\" onClick={this.registerVotes}>Vote this one!</Button>\n                                            </div>\n                                        </Form.Group>\n\n                                        <br/>\n\n                                    </Card.Body>\n                                </Card>\n\n                                <Card style={{width: '50rem'}}>\n                                    <Card.Header className=\"text-center\" ><strong>Your role: admin </strong> </Card.Header>\n\n                                    <Card.Body >\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <Button style={{minWidth:'350px'}} onClick={this.endSessionVotes} variant=\"danger\"> Close the session of votes </Button>\n                                        </div>\n                                        <br/>\n\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <Button style={{minWidth:'350px'}} onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        </div>\n                    )\n\n              break;\n\n            //The admin could begin the tally session\n            case 4:\n\n                if (cSAccounts0 === ownerOfVotes) {\n\n                    return (\n                        <div>\n                            {header}\n\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Button style={{minWidth:'350px'}} onClick={this.beginTallySession} variant=\"success\"> Begin the tally session </Button>\n                            </div>\n                            <br/>\n                            <div style={{display: 'flex', justifyContent: 'center'}}>\n                                <Button style={{minWidth:'350px'}} onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                            </div>\n                        </div>\n                    )\n\n\n                } else {\n                    return (\n                        <div>\n                            {header}\n                            {forbiddenOperationsArea}\n                        </div>\n                    )\n                }\n                break;\n\n            //We can consult, now, for every voters, the winning proposal\n            case 5:\n\n                return (\n                    <div>\n                        {header}\n\n                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                            <Card style={{width: '50rem'}}>\n                                <Card.Header className=\"text-center\"><strong>List of registered proposals</strong></Card.Header>\n                                <Card.Body>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item>\n                                            <Table striped bordered hover>\n                                                <thead>\n                                                <tr>\n                                                    <th>ID</th>\n                                                    <th>proposal(s)</th>\n                                                    <th>Number of votes for this one: </th>\n                                                </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {/* list all the proposals from the smart contract */}\n                                                    { proposals !== null && proposals.map((key, index) =>\n                                                        <tr key={index}>\n                                                            <td>{index}</td>\n                                                            <td>{key.description}</td>\n                                                            <td>{key.voteCount}</td>\n                                                        </tr>\n                                                    )}\n\n                                                </tbody>\n                                            </Table>\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Card.Body>\n                            </Card>\n\n                            <Card style={{width: '50rem',justifyContent: 'center'}}>\n                                <Card.Header className=\"text-center\"><strong>The winning proposal is:</strong></Card.Header>\n                                <Card.Body >\n\n                                    <Form.Group>\n\n                                        <br/>\n                                        <div style={{display: 'flex', justifyContent: 'center'}}>\n                                            <h3>{proposals[winningProposalID].description}</h3>\n                                        </div>\n                                        \n                                    </Form.Group>\n                                    <br/>\n\n                                </Card.Body>\n                            </Card>\n\n                            <Card style={{width: '50rem'}}>\n                                <Card.Header className=\"text-center\" ><strong>Your role: admin </strong> </Card.Header>\n\n                                <Card.Body >\n\n                                    <div style={{display: 'flex', justifyContent: 'center'}}>\n                                        <Button onClick={this.getStatusOfWorkflow} variant=\"info\"> Get the status of the workflow (console) </Button>\n                                    </div>\n\n                                </Card.Body>\n                            </Card>\n                        </div>\n                    </div>\n                )\n            default:\n                return(<div><h1>The application doesn't seem to work well!</h1></div>);\n\n\n        }//end of switch\n    }//end of the render\n\n\n}//end of the class App\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}